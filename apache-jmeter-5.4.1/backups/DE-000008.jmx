<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables QA" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="APP_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">APP_PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(protocol, https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENCODING" elementType="Argument">
            <stringProp name="Argument.name">ENCODING</stringProp>
            <stringProp name="Argument.value">UTF-8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">DECISIONENGINE_API_USER</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">decisionengine_qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_VERSION" elementType="Argument">
            <stringProp name="Argument.name">API_VERSION</stringProp>
            <stringProp name="Argument.value">v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">DECISIONENGINE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_SECRET" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_SECRET</stringProp>
            <stringProp name="Argument.value">decisionengine_qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GRANT_TYPE" elementType="Argument">
            <stringProp name="Argument.name">GRANT_TYPE</stringProp>
            <stringProp name="Argument.value">client_credentials</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENV" elementType="Argument">
            <stringProp name="Argument.name">ENV</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables DEV" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="APP_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">APP_PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(protocol, https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENCODING" elementType="Argument">
            <stringProp name="Argument.name">ENCODING</stringProp>
            <stringProp name="Argument.value">UTF-8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">DECISIONENGINE_API_USER</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">decisionengine_dev</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="API_VERSION" elementType="Argument">
            <stringProp name="Argument.name">API_VERSION</stringProp>
            <stringProp name="Argument.value">v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">DECISIONENGINE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_SECRET" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_SECRET</stringProp>
            <stringProp name="Argument.value">decisionengine_dev</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GRANT_TYPE" elementType="Argument">
            <stringProp name="Argument.name">GRANT_TYPE</stringProp>
            <stringProp name="Argument.value">client_credentials</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENV" elementType="Argument">
            <stringProp name="Argument.name">ENV</stringProp>
            <stringProp name="Argument.value">dev</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${APP_PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">${ENCODING}</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - haas/token" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - To get Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${USERNAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${GRANT_TYPE}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ENV}.hyla.hylatest.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/haas/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">${APP_PROTOCOL}://${ENV}.hyla.hylatest.com</stringProp>
                  <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                  <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT FOUND</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">${__setProperty(access_token, ${access_token})}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DE API&apos;s" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - RouteToQC" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;information&quot;: {&#xd;
        &quot;DATAWIPE_STATUS&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;true&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;DEACTIVATED&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;true&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;EXTERIOR_BUTTONS&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;LCD_BRUISING&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;TRADE_REFERENCE&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;NO&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;CELL_PHONE_IMEI_ESN&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;SAMSUNG14000001039&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;SURFACE_ALL&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;SURFACE_C&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;TAKES_CHARGE&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;REAR_CAMERA&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;POWER_ON&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;true&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;SWOLLEN_EXPLODED_BATTERY&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;true&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;FRONT_CAMERA&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;TRADE_TYPE&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;NO&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;BATTERY_HEALTH&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;NO&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;SPEAKER_MICROPHONE&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;AUTO_DATAWIPE&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;NO&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;REF_NO&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;MISSING_PIXELS&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;false&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;LCD_CRACKED&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;true&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        },&#xd;
        &quot;SCREEN_ON&quot;: {&#xd;
            &quot;inspectionResponse&quot;: &quot;YES&quot;,&#xd;
            &quot;isEditable&quot;: &quot;true&quot;,&#xd;
            &quot;isRouteToQCForApi&quot;: &quot;true&quot;,&#xd;
            &quot;isAutoAnswered&quot;: &quot;false&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;routeToQC&quot;: true,&#xd;
    &quot;ruleSetName&quot;: &quot;ROUTE-TO-QC-ALL-WF&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ENV}-cs.hyla.hylatest.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">decisionengine/api/route-to-qc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
