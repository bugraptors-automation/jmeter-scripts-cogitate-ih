<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="APP_URL" elementType="Argument">
            <stringProp name="Argument.name">APP_URL</stringProp>
            <stringProp name="Argument.value"> https://ctsdiep2devstorage.z13.web.core.windows.net/ih-load-testing/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads, 1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup, 1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration, 900)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">chromedriver-linux64/chromedriver</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <boolProp name="WebDriverConfig.headless">false</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
          <stringProp name="propFilePath">D:\Downloads\chrome downloads\jmeter-scripts-cogitate-ih-develop\user.properties</stringProp>
        </com.tag.jmeter.ext.config.PropertyReader>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-property file" enabled="true">
          <stringProp name="filename">D:\Downloads\chrome downloads\jmeter-scripts-cogitate-ih-develop\user.properties</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">counterDr</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Login Details" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">LoginDetails.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">primaryRole,agentUsername,agentPassword,underwriterUsername,underwriterPasssword</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - Advanced Search" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">AdvanceSearch.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">status,insuredName,fromDate,toDate,policyNo,applicationNo,phoneNo</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config- NB-PolicyInfo" enabled="true">
          <stringProp name="filename">NB-PolicyInfo.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">firstName,lastName,streetAddress </stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-NB-GetVehicle" enabled="true">
          <stringProp name="filename">NewBusinessVehiclesDetails.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">vehicleIdenficationNumVehicle1,vehicleUseVehicle1,annualMileageVehicle1,otcVehicle1,garrageAddressSame,garagingAddressVehicle1,apartmentVehicle1,zipVehicle1,lienHolderVehicle1,lienHolderTypeVehicle1,lienHolderNameVehicle1,lienHolderAddressVehicle1,lienHolderZipVehicle1,lienHolderCityVehicle1,lienHolderStateVehicle1,vehicleIdenficationNumVehicle2,vehicleUseVehicle2,annualMileageVehicle2,otcVehicle2,garagingAddressVehicle2,apartmentVehicle2,zipVehicle2,lienHolderTypeVehicle2,lienHolderNameVehicle2,leinHolderAddressVehicle2,leinHolderZipVehicle2,leinHolderCityVehicle2,leinHolderStateVehicle2,vehicleIdenficationNumVehicle3,vehicleUseVehicle3,annualMileageVehicle3,otcVehicle3,garagingAddressVehicle3,apartmentVehicle3,zipVehicle3,lienHolderTypeVehicle3,lienHolderNameVehicle3,lienHolderAddressVehicle3,lienHolderZipVehicle3,lienHolderCityVehicle3,lienHolderStateVehicle3,vehicleIdenficationNumVehicle4,vehicleUseVehicle4,annualMileageVehicle4,otcVehicle4,garagingAddressVehicle4,apartmentVehicle4,zipVehicle4,lienHolderTypeVehicle4,lienHolderNameVehicle4,leinHolderAddressVehicle4,leinHolderZipVehicle4,leinHolderCityVehicle4,leinHolderStateVehicle4,vehicleIdenficationNumVehicle5,vehicleUseVehicle5,annualMileageVehicle5,otcVehicle5,garagingAddressVehicle5,apartmentVehicle5,zipVehicle5,lienHolderTypeVehicle5,lienHolderNameVehicle5,leinHolderAddressVehicle5,leinHolderZipVehicle5,leinHolderCityVehicle5,leinHolderStateVehicle5 </stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-NB-Drivers" enabled="true">
          <stringProp name="filename">NewBusinessDriversDetails.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">dobDriver1,genderOfDriver1,maritalStatusDriver1,descriptionDriver1,licenseNoDriver1,addViolationDriver,violationDateDriver1,violationByDriver1,accidentWithViolationDriver1,firstNameDriver2,lastNameDriver2,dobDriver2,genderOfDriver2,maritalStatusDriver2,relationshipToApplicantDriver2,descriptionDriver2,driverTypeDriver2,licenseNoDriver2,violationDateDriver2,violationByDriver2,accidentWithViolationDriver2,firstNameDriver3,lastNameDriver3,dobDriver3,genderOfDriver3,maritalStatusDriver3,relationshipToApplicantDriver3,descriptionDriver3,driverTypeDriver3,licenseNoDriver3,violationDateDriver3,violationByDriver3,accidentWithViolationDriver3,firstNameDriver4,lastNameDriver4,dobDriver4,genderOfDriver4,maritalStatusDriver4,relationshipToApplicantDriver4,descriptionsDriver4,driverTypeDriver4,licenseNoDriver4,violationDateDriver4,violationByDriver4,accidentWithViolationDriver4</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config-NB-Coverage" enabled="true">
          <stringProp name="filename">NewBusinessCoveragesDetails.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">stackedUninsuredMotorist,medicalPaymentLimit,towingAndLabour,rentalReimburse,signatureType,email,mobNo</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Get Login" enabled="true">
            <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;${APP_URL}&apos;);
WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(20));

WDS.sampleResult.sampleStart();
if(&quot;${primaryRole}&quot; == &quot;agent&quot;)
{
WDS.browser.findElement(pkg.By.name(&quot;username&quot;)).sendKeys(&quot;${agentUsername}&quot;);
WDS.browser.findElement(pkg.By.name(&quot;password&quot;)).sendKeys(&quot;${agentPassword}&quot;);
}
else if(&quot;${primaryRole}&quot; == &quot;underwriter&quot;)
{
WDS.browser.findElement(pkg.By.name(&quot;username&quot;)).sendKeys(&quot;${underwriterUsername}&quot;);
WDS.browser.findElement(pkg.By.name(&quot;password&quot;)).sendKeys(&quot;${underwriterPasssword}&quot;);
}
WDS.browser.findElement(pkg.By.cssSelector(&quot;.buttonLogin&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));


WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller -  New Business" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Select New Business" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

WDS.browser.findElement(pkg.By.xpath(&quot;//img[@alt=&apos;New Business&apos;]&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Ineligible Risks" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.id(&quot;iAgreeoption&quot;)));

WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Policy Info" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();
java.lang.Thread.sleep(4000);
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));
WDS.browser.findElement(pkg.By.id(&quot;firstname&quot;)).sendKeys(&quot;${firstName}&quot;);
WDS.browser.findElement(pkg.By.id(&quot;lastname&quot;)).sendKeys(&quot;${lastName}&quot;);

WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-addmanualaddress-0&apos;]&quot;)));

WDS.browser.findElement(pkg.By.id(&quot;streetname&quot;)).sendKeys(&quot;${streetAddress}&quot;);

WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-authorizationforreports-0&apos;]&quot;)));

WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-authorizationforinsurancecreditscore-0&apos;]&quot;)));

WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));


WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;counter&quot;,&quot;1&quot;);




</stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller-driver" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(parseInt(vars.get(&quot;counter&quot;))&lt;=${__P(numberOfDrivers)},)}

</stringProp>
            </WhileController>
            <hashTree>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Drivers" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();
java.lang.Thread.sleep(2000);
if(&quot;${counter}&quot; &gt; 1)
{
WDS.browser.findElement(pkg.By.cssSelector(&quot;.col-md-6.my-auto.text-end .btn.btnStyle.btnPrim&quot;)).click();

WDS.browser.findElement(pkg.By.cssSelector(&apos;[id=&quot;firstname&quot;]&apos;)).sendKeys(&quot;${__V(firstNameDriver${counter})}&quot;);

WDS.browser.findElement(pkg.By.cssSelector(&apos;[id=&quot;lastname&quot;]&apos;)).sendKeys(&quot;${__V(lastNameDriver${counter})}&quot;);

var selectRelation = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;relationship&quot;)));
selectRelation.selectByVisibleText(&quot;${__V(relationshipToApplicantDriver${counter})}&quot;);

var selectDriverType = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;drivertypeGA&quot;)));
selectDriverType.selectByVisibleText(&quot;${__V(driverTypeDriver${counter})}&quot;);
}
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.browser.findElement(pkg.By.id(&quot;dob&quot;)).sendKeys(&quot;${__V(dobDriver${counter})}&quot;);

var selectGender = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;gender&quot;)));
selectGender.selectByVisibleText(&quot;${__V(genderOfDriver${counter})}&quot;);

var selectMaritalStatus = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;maritalstatus&quot;)));
selectMaritalStatus.selectByVisibleText(&quot;${__V(maritalStatusDriver${counter})}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;OccupationDescribe&quot;)).sendKeys(&quot;${__V(descriptionDriver${counter})}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;driversLicenseNo&quot;)).sendKeys(&quot;${__V(licenseNoDriver${counter})}&quot;);

if(&quot;${addViolationDriver}&quot; == &quot;Yes&quot;)
{
WDS.browser.findElement(pkg.By.id(&quot;violationDate&quot;)).sendKeys(&quot;${__V(violationDateDriver${counter})}&quot;);
java.lang.Thread.sleep(2000);

var selectViolation = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div/div/div[2]/div[1]/div[2]/div/div[2]/div/div[1]/div[1]/div/form/div/div/div/div[3]/div/div/div[1]/div[2]/input&quot;));
selectViolation.sendKeys(&quot;${__V(violationByDriver${counter})}&quot;);
selectViolation.sendKeys(org.openqa.selenium.Keys.ENTER);

var selectAccidentWithViolation = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;accidentWithViolation&quot;)));
selectAccidentWithViolation.selectByValue(&quot;${__V(accidentWithViolationDriver${counter})}&quot;);
java.lang.Thread.sleep(1000);

WDS.browser.findElement(pkg.By.id(&quot;submitsetViolationForm&quot;)).click();
}
WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();
java.lang.Thread.sleep(3000);

WDS.sampleResult.sampleEnd();</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">int counter = Integer.parseInt(vars.get(&quot;counter&quot;)) +1;
vars.put(&quot;counter&quot;,Integer.toString(counter));

</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">vars.put(&quot;counterV&quot;,&quot;1&quot;);
</stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Get Vehicles" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(parseInt(vars.get(&quot;counterV&quot;))&lt;=${__P(numberOfVehicles)},)}</stringProp>
            </WhileController>
            <hashTree>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Vehicles" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();
java.lang.Thread.sleep(2000);
if(${counterV}&gt;1)
{
WDS.browser.findElement(pkg.By.xpath(&quot;//button[text()=&apos;ADD VEHICLE&apos;]&quot;)).click();
}
var enterVIN = WDS.browser.findElement(pkg.By.id(&quot;vehiclevin&quot;));
enterVIN.sendKeys(&quot;${__V(vehicleIdenficationNumVehicle${counterV})}&quot;);
enterVIN.sendKeys(org.openqa.selenium.Keys.ENTER);
//WDS.browser.findElement(pkg.By.id(&quot;vehiclevin&quot;)).sendKeys(&quot;${__V(vehicleIdenficationNumVehicle${counterV})}&quot;);
//WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

var selectUse = WDS.browser.findElement(pkg.By.id(&quot;vehicleuse&quot;));
selectUse.sendKeys(&quot;${__V(vehicleUseVehicle${counterV})}&quot;);

WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-vehicleListed-1&apos;]&quot;)));

var selectMileage = WDS.browser.findElement(pkg.By.id(&quot;annualmileage&quot;));
selectMileage.sendKeys(&quot;${__V(annualMileageVehicle${counterV})}&quot;);

var selectOTC = WDS.browser.findElement(pkg.By.id(&quot;otcdeductibleGA&quot;));
selectOTC.sendKeys(&quot;${__V(otcVehicle${counterV})}&quot;);

java.lang.Thread.sleep(1000);
if(&quot;${garrageAddressSame}&quot; == &quot;No&quot;)
{
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-isGaragingAddressMailing-1&apos;]&quot;)));

WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-addGaragingAddressManually-0&apos;]&quot;)));

WDS.browser.findElement(pkg.By.id(&quot;garagingaddressdetailsstreetname&quot;)).sendKeys(&quot;${__V(garagingAddressVehicle1${counterV})}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;garagingaddressdetailsaptsuite&quot;)).sendKeys(&quot;${__V(apartmentVehicle${counterV})}&quot;);

var selectZip = WDS.browser.findElement(pkg.By.cssSelector(&quot; .css-19bb58m input#react-select-7-input&quot;));
selectZip.sendKeys(&quot;${__V(zipVehicle${counterV})}&quot;);
selectZip.sendKeys(org.openqa.selenium.Keys.ENTER);
};
java.lang.Thread.sleep(2000);

if(&quot;${lienHolder}&quot; == &quot;Yes&quot;)
{
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-hasAdditionalInterestDetails-0&apos;]&quot;)));

var selectLhType = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;Type&quot;)));
selectLhType.selectByValue(&quot;${__V(lienHolderTypeVehicle${counterV})}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;InterestName&quot;)).sendKeys(&quot;${__V(lienHolderNameVehicle${counterV})}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;StreetName&quot;)).sendKeys(&quot;${__V(lienHolderAddressVehicle${counterV})}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;zipCode&quot;)).sendKeys(&quot;${__V(lienHolderZipVehicle${counterV})}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;City&quot;)).sendKeys(&quot;${__V(lienHolderCityVehicle${counterV})}&quot;);
java.lang.Thread.sleep(1000);
var selectState = WDS.browser.findElement(pkg.By.cssSelector(&quot;.css-19bb58m input#react-select-7-input&quot;));
selectState.sendKeys(&quot;${__V(lienHolderStateVehicle${counterV})}&quot;);
selectState.sendKeys(org.openqa.selenium.Keys.ENTER);
}

WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();
java.lang.Thread.sleep(3000);
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">int counterV = Integer.parseInt(vars.get(&quot;counterV&quot;)) +1;
vars.put(&quot;counterV&quot;,Integer.toString(counterV));</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Underwriting" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(20));

WDS.sampleResult.sampleStart();
WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));
//Q1=No
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-physicalImpairment-1&apos;]&quot;)));
//Q2=Yes
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-infrequentBasis-0&apos;]&quot;)));
//Q3=Yes
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-ageDisclosed-0&apos;]&quot;)));
//Q4=No
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-notStationed-1&apos;]&quot;)));
//Q5=I Agree
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-agreeToNotify-0&apos;]&quot;)));
//Q6=I Agree
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-undisclosedDriver-0&apos;]&quot;)));
//Q7=No
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-unrepairedDamage-1&apos;]&quot;)));
//Q8=Yes
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-allVehiclesListed-0&apos;]&quot;)));
//Q9=Yes
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-allVehicleTitled-0&apos;]&quot;)));
//Q10=Yes
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-requiredInspection-0&apos;]&quot;)));
//Q11=Yes
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-garagedInState-0&apos;]&quot;)));
//Q12=No
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-provideService-1&apos;]&quot;)));
//Q13=No
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-usedInDNP-1&apos;]&quot;)));
//Q14=No
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-convictedOfFelony-1&apos;]&quot;)));
//Q15=No
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;radio-businessUse-1&apos;]&quot;)));

WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Coverages" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(20));

WDS.sampleResult.sampleStart();

var selectStackedUninsured = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;selectstackedum&quot;)));
selectStackedUninsured.selectByVisibleText(&quot;${stackedUninsuredMotorist}&quot;);

//if(&quot;${additionalCoverage}&quot; == &quot;Yes&quot;)
//{
//var selectMedicalPayment = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;medicalpaymentlimitsGA&quot;)));
//selectMedicalPayment.selectByValue(&quot;${medicalPaymentLimit}&quot;);
//
//var selectTowing = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;towingAndLaborGA&quot;)));
//selectTowing.selectByValue(&quot;${towingAndLabour}&quot;);
//
//var selectReimburse = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;rentalReimburseGA&quot;)));
//selectReimburse.selectByValue(&quot;${rentalReimburse}&quot;);
//}
var selectSignature = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;signatureType&quot;)));
selectSignature.selectByValue(&quot;${signatureType}&quot;); 
java.lang.Thread.sleep(2000);

//click to calculate premium button
WDS.browser.findElement(pkg.By.xpath(&quot;//button[@class=&apos;btn btnStyle btnPrim mx-auto&apos;]&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.browser.findElement(pkg.By.id(&quot;emailaddress&quot;)).sendKeys(&quot;${email}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;mobilephonenumber&quot;)).sendKeys(&quot;${mobNo}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;btnnext&quot;)).click();
//java.lang.Thread.sleep(20000);
wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));
//
wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Summary" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(120));

WDS.sampleResult.sampleStart();
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.browser.findElement(pkg.By.xpath(&quot;//button[text()=&apos;Order Report&apos;]&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.browser.findElement(pkg.By.id(&quot;successBTN&quot;)).click();
java.lang.Thread.sleep(500);
WDS.browser.findElement(pkg.By.id(&quot;successBTN&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));
java.lang.Thread.sleep(5000); //Note: website taking time show next progress loader
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.browser.findElement(pkg.By.xpath(&quot;//button[text()=&apos;Make a Payment&apos;]&quot;)).click();
WDS.browser.findElement(pkg.By.cssSelector(&quot;tr:nth-child(1) input[name=&apos;groupOptions&apos;]&quot;)).click();
WDS.browser.executeScript(&quot;arguments[0].click();&quot;,WDS.browser.findElement(pkg.By.xpath(&quot;//button[text()=&apos;PAY &amp; BIND&apos;]&quot;)));
wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));
WDS.browser.navigate().refresh();
java.lang.Thread.sleep(2000);

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));
WDS.browser.findElement(pkg.By.xpath(&apos;//button[@id=&quot;summary-tabs-tab-documents&quot;]&apos;)).click();
java.lang.Thread.sleep(2000);
WDS.browser.executeScript(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;);
WDS.browser.findElement(pkg.By.className(&quot;summaryEdit&quot;)).click();
java.lang.Thread.sleep(2000);
wait.until(ui.ExpectedConditions.visibilityOf(WDS.browser.findElement(pkg.By.xpath(&quot;//h5[text()=&apos;MANUAL UPLOAD&apos;]&quot;))));

var selectDocumentType = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;documentType&quot;)));
selectDocumentType.selectByVisibleText(&quot;Signed New Business forms&quot;);

WDS.browser.findElement(pkg.By.id(&quot;fileupload&quot;)).sendKeys([&quot;D:\Downloads\chrome downloads\jmeter-scripts-cogitate-ih-develop\UploadFile.pdf&quot;]);

WDS.browser.findElement(pkg.By.id(&quot;submitManualUpload&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - New Business" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>40.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - Endorsement" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - Endorsement" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Search" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

//WDS.browser.findElement(pkg.By.id(&quot;search-bar-0&quot;)).sendKeys(&quot;${}&quot;);
//WDS.browser.findElement(pkg.By.id(&quot;search-bar-0&quot;)).sendKeys(pkg.Keys.TAB);

wait.until(ui.ExpectedConditions.visibilityOf(WDS.browser.findElement(pkg.By.xpath(&quot;//tbody/tr[1]/td/a[@title=&apos;Endorse&apos;]&quot;))));
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Select Policy" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();
var endorseBtn = WDS.browser.findElement(pkg.By.xpath(&quot;//tbody/tr[1]/td/a[@title=&apos;Endorse&apos;]&quot;));
WDS.browser.executeScript(&quot;arguments[0].scrollIntoView(true);&quot;,endorseBtn);
WDS.browser.executeScript(&quot;arguments[0].click();&quot;, endorseBtn);

java.lang.Thread.sleep(1000);//NOTE: needed this wait as there is delay in website itself.

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - Cancellation" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>20.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - Cancellation" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Search" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

WDS.browser.findElement(pkg.By.id(&quot;search-bar-0&quot;)).sendKeys(&quot;${policyNumToCancel}&quot;);

wait.until(ui.ExpectedConditions.visibilityOf(WDS.browser.findElement(pkg.By.xpath(&quot;//tbody/tr[1]/td/a[@title=&apos;Cancel&apos;]&quot;))));
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Select Policy" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();
WDS.browser.findElement(pkg.By.xpath(&quot;//tbody/tr[1]/td/a[@title=&apos;Cancel&apos;]&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - Reinstate" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - Reinstate" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Search" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

WDS.browser.findElement(pkg.By.id(&quot;search-bar-0&quot;)).sendKeys(&quot;${policyNumToReinstate}&quot;);

wait.until(ui.ExpectedConditions.visibilityOf(WDS.browser.findElement(pkg.By.xpath(&quot;//tbody/tr[1]/td/a[@title=&apos;Reinstate&apos;]&quot;))));
//wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Select Policy" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();
WDS.browser.findElement(pkg.By.xpath(&quot;//tbody/tr[1]/td/a[@title=&apos;Reinstate&apos;]&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Reinstate Policy" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

WDS.browser.findElement(pkg.By.id(&quot;reinstatementterms&quot;)).sendKeys(&quot;${reinstatementTerms}&quot;);

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - View" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>20.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - View" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${status}&quot; != &quot;&quot; || &quot;${status}&quot; != &quot;All Status&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Search Filter" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

var selectStatus = new ui.Select(WDS.browser.findElement(pkg.By.id(&quot;status&quot;)));
selectStatus.selectByVisibleText(&quot;${status}&quot;);

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Advanced Search" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();
WDS.browser.findElement(pkg.By.cssSelector(&quot;.advSearch&quot;)).click();

WDS.browser.findElement(pkg.By.id(&quot;insuredName&quot;)).sendKeys(&quot;${insuredName}&quot;);
WDS.browser.findElement(pkg.By.id(&quot;fromdate&quot;)).sendKeys(&quot;${fromDate}&quot;);
WDS.browser.findElement(pkg.By.id(&quot;todate&quot;)).sendKeys(&quot;${toDate}&quot;);
WDS.browser.findElement(pkg.By.id(&quot;policynumber&quot;)).sendKeys(&quot;${policyNo}&quot;);
WDS.browser.findElement(pkg.By.id(&quot;applicationnumber&quot;)).sendKeys(&quot;${applicationNo}&quot;);
WDS.browser.findElement(pkg.By.id(&quot;phonenumber&quot;)).sendKeys(&quot;${phoneNo}&quot;);

WDS.browser.findElement(pkg.By.id(&quot;submitAdvSearch&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="View" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(10));

WDS.sampleResult.sampleStart();

var viewBtn = WDS.browser.findElement(pkg.By.xpath(&quot;//tbody/tr[1]/td/a[@title=&apos;View&apos;]&quot;));

WDS.browser.executeScript(&quot;arguments[0].scrollIntoView(true);&quot;,viewBtn);

WDS.browser.executeScript(&quot;arguments[0].click();&quot;, viewBtn);

java.lang.Thread.sleep(1000);//NOTE: needed this wait as there is delay in website itself.

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller - Logout" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Logout" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var ui = JavaImporter(org.openqa.selenium.support.ui);
var wait = new support_ui.WebDriverWait(WDS.browser, java.time.Duration.ofSeconds(20));

WDS.sampleResult.sampleStart();
WDS.browser.findElement(pkg.By.id(&quot;logout&quot;)).click();

wait.until(ui.ExpectedConditions.invisibilityOf(WDS.browser.findElement(pkg.By.id(&quot;nprogress&quot;))));

WDS.sampleResult.sampleEnd();
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
